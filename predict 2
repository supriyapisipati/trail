import yfinance as yf
import numpy as np
import datetime
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

# Function to fetch live stock data
def fetch_stock_data(ticker, start_date, end_date):
    try:
        stock_data = yf.download(ticker, start=start_date, end=end_date)
        return stock_data
    except Exception as e:
        print("Error fetching stock data:", e)
        return None

# Function to preprocess stock data
def preprocess_data(stock_data):
    try:
        # Selecting relevant features and dropping NaN values
        features = stock_data[['Open', 'High', 'Low', 'Volume']].dropna()
        return features
    except Exception as e:
        print("Error preprocessing stock data:", e)
        return None

# Function to make predictions
def predict_stock_price(model, features):
    try:
        predicted_price = model.predict(features)
        return predicted_price[-1]  # Return only the latest prediction
    except Exception as e:
        print("Error predicting stock price:", e)
        return None

# Main function
def main():
    # Fetch live Tesla stock data
    ticker = 'TSLA'
    start_date = datetime.datetime.now() - datetime.timedelta(days=365)  # 1 year historical data
    end_date = datetime.datetime.now()
    stock_data = fetch_stock_data(ticker, start_date, end_date)
    
    if stock_data is None:
        print("Failed to fetch stock data. Exiting.")
        return
    
    # Preprocess data
    features = preprocess_data(stock_data)
    
    if features is None or len(features) == 0:
        print("Failed to preprocess stock data. Exiting.")
        return
    
    # Extracting features and target variable
    X = features[['Open', 'High', 'Low', 'Volume']].values
    y = features['Close'].values
    
    # Normalize features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Train a simple linear regression model
    model = LinearRegression()
    model.fit(X_scaled, y)
    
    # Make predictions
    latest_features = X_scaled[-1].reshape(1, -1)  # Latest data point
    predicted_price = predict_stock_price(model, latest_features)
    
    if predicted_price is not None:
        print("Predicted Tesla stock price:", predicted_price)
    else:
        print("Failed to predict Tesla stock price. Exiting.")

if __name__ == "__main__":
    main()
